//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApp.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class child
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public child()
        {
            this.child_portfolio = new HashSet<child_portfolio>();
        }
    
        public int child_id { get; set; }
        public Nullable<System.DateTime> Bday { get; set; }
        public Nullable<int> father_id { get; set; }
        public Nullable<int> group_id { get; set; }
        public Nullable<int> mother_id { get; set; }
        public Nullable<int> gender { get; set; }
        public string child_patronymic { get; set; }
        public string child_surname { get; set; }
        public string child_name { get; set; }
    
        public virtual father father { get; set; }
        public virtual group group { get; set; }
        public virtual mother mother { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<child_portfolio> child_portfolio { get; set; }


        public  void CreateChildData(child child)
        {
            using (var ctx = new kindergartenEntities())
            {
                string query = "insert into child (child_id, BDay, father_id, group_id, mother_id, gender, child_patronymic, child_surname,  child_name ) values (@P0, @P1, @P2, @P3, @P4, @P5, @P6, @P7, @P8)";
                List<object> paramlist = new List<object>
            {
                child.child_id,
                child.Bday,
                child.father_id,
                child.group_id,
                child.mother_id,
                child.gender,
                child.child_patronymic,
                child.child_surname,
                child.child_name,

            };

                object[] parameters = paramlist.ToArray();
                int result = ctx.Database.ExecuteSqlCommand(query, parameters);
            }


        }

        public static List<child> GetChild()
        {
            List<child> childs = new List<child>();
            using (var ctx = new kindergartenEntities())
            {
                string query = "select * from child";
                childs.AddRange(ctx.Database.SqlQuery<child>(query));
            }
            return childs;
        }
    }

 



}
